"use strict";var _commentService=_interopRequireDefault(require("../comment.service.js")),_Comment=_interopRequireDefault(require("../entity/Comment.js")),_Post=_interopRequireDefault(require("../../post/entity/Post.js"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const commentService=new _commentService.default;describe("Comment module",()=>{let a,b,c,d;beforeEach(()=>{a={body:{text:"Some text",user:"mockUserId",avatarUrl:"mockUserAvatarUrl",fullName:"mockUserFullname",post:"mockPostId"}},b={status:jest.fn().mockReturnThis(),json:jest.fn()},c={_id:"mockCommentId",text:a.body.text,user:a.userId,avatarUrl:a.body.avatarUrl,fullName:a.body.fullName,post:a.body.post,createdAt:"2023-01-13T09:13:22.355Z",updatedAt:"2023-03-16T10:17:10.968Z"},d={_id:"mockCommentId",text:a.body.text,user:{_id:"mockUserId",rank:"mockRank",email:"mockUserEmail",fullName:"mockUserFullname",avatarUrl:"mockUserAvatarUrl",passwordHash:"mockPasswordHash"},avatarUrl:a.body.avatarUrl,fullName:a.body.fullName,post:a.body.post,createdAt:"2023-01-13T09:13:22.355Z",updatedAt:"2023-03-16T10:17:10.968Z"}}),afterEach(()=>{jest.clearAllMocks()}),it("Should create and return new comment",async()=>{_Post.default.findByIdAndUpdate=jest.fn().mockImplementation((b,d,e)=>{const f=null,g=c;expect(b).toEqual(a.body.post),expect(d).toEqual({$inc:{commentsCount:1}}),g?e(null,g):e(null,null)}),_Comment.default.prototype.save=jest.fn().mockResolvedValue(c),jest.spyOn(_Comment.default,"populate").mockReturnValue(d),await commentService.create(a,b),expect(b.status).toHaveBeenCalledWith(200),expect(b.json).toHaveBeenCalledWith({comment:d})}),it("Should return 404 error post not found",async()=>{_Post.default.findByIdAndUpdate=jest.fn().mockImplementation((b,c,d)=>{const e=null,f=null;expect(b).toEqual(a.body.post),expect(c).toEqual({$inc:{commentsCount:1}}),d(null,null)}),await commentService.create(a,b),expect(b.status).toHaveBeenCalledWith(404),expect(b.json).toHaveBeenCalledWith({message:"\u0417\u0430\u043F\u0438\u0441\u044C \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u0430"})}),it("Should return 500 error PostModel.findByIdAndUpdate",async()=>{_Post.default.findByIdAndUpdate=jest.fn().mockImplementation((b,c,d)=>{const e=null;expect(b).toEqual(a.body.post),expect(c).toEqual({$inc:{commentsCount:1}}),d(!0,null)}),await commentService.create(a,b),expect(b.status).toHaveBeenCalledWith(500),expect(b.json).toHaveBeenCalledWith({message:"\u0427\u0442\u043E-\u0442\u043E \u043F\u043E\u0448\u043B\u043E \u043D\u0435 \u0442\u0430\u043A"})})});