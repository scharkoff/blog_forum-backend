"use strict";var _bcrypt=_interopRequireDefault(require("bcrypt")),_User=_interopRequireDefault(require("../../user/entity/User.js")),_authService=_interopRequireDefault(require("../auth.service.js")),_tokenService=_interopRequireDefault(require("../../token/token.service.js"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const authService=new _authService.default;jest.mock("bcrypt"),describe("Login module",()=>{let a,b,c,d,e,f;beforeEach(()=>{a={body:{email:"test@example.com",fullName:"Test User",password:"123456"}},b={status:jest.fn().mockReturnThis(),json:jest.fn(),cookie:jest.fn()},d={_id:"mockUserId",rank:"user",email:a.body.email,fullName:a.body.fullName,avatarUrl:"mockUserAvatarUrl",passwordHash:"mockPasswordHash"},c={...d,_doc:d},e={accessToken:"mockAccessToken",refreshToken:"mockRefreshToken"},f={generateTokens:jest.fn()}}),afterEach(()=>{jest.clearAllMocks()}),it("Should return user data and token",async()=>{jest.spyOn(_User.default,"findOne").mockResolvedValue(c),_bcrypt.default.compare.mockResolvedValueOnce(!0);const d=new _authService.default(f);d._tokenService.generateTokens=jest.fn().mockReturnValue(e),_tokenService.default.prototype.save=jest.fn(),await d.login(a,b),expect(d._tokenService.generateTokens).toHaveBeenCalledWith({id:c._id}),expect(_tokenService.default.prototype.save).toHaveBeenCalledWith(c._id,e.refreshToken),expect(_bcrypt.default.compare).toHaveBeenCalledWith(a.body.password,"mockPasswordHash"),expect(b.cookie).toHaveBeenCalledWith("refreshToken",e.refreshToken,{maxAge:2592000000,httpOnly:!0,secure:!0,sameSite:"none"}),expect(b.status).toHaveBeenCalledWith(200);const{passwordHash:g,...h}=c._doc;expect(b.json).toHaveBeenCalledWith({userData:h,accessToken:e.accessToken})}),it("Should return error if email is incorrect",async()=>{jest.spyOn(_User.default,"findOne").mockResolvedValue(null),await authService.login(a,b),expect(b.status).toHaveBeenCalledWith(400),expect(b.json).toHaveBeenCalledWith({message:"\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043B\u043E\u0433\u0438\u043D \u0438\u043B\u0438 \u043F\u0430\u0440\u043E\u043B\u044C!"})}),it("Should return error if password is incorrect",async()=>{_bcrypt.default.compare.mockResolvedValueOnce(!1),await authService.login(a,b),expect(b.status).toHaveBeenCalledWith(400),expect(b.json).toHaveBeenCalledWith({message:"\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u043B\u043E\u0433\u0438\u043D \u0438\u043B\u0438 \u043F\u0430\u0440\u043E\u043B\u044C!"})})});